SET SQL_SAFE_UPDATES = 0;
DROP DATABASE IF EXISTS DBCONTACORRENTE;
CREATE DATABASE DBCONTACORRENTE;
USE DBCONTACORRENTE;


CREATE TABLE CLIENTE(
	IDCLIENTE INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, NOME VARCHAR(100)
	, CPF CHAR(11)
);


CREATE TABLE CONTA (
	IDCONTA INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, IDCLIENTE INT NOT NULL
	, DT_ABERTURA DATE
	, LIMITE_CREDITO NUMERIC(8,2)
	, TIPO ENUM('CONTA-CORRENTE', 'POUPANÇA')
	, FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE (IDCLIENTE)
);

CREATE TABLE MOVIMENTACAO(
	IDMOVIMENTACAO INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, IDCONTA INT NOT NULL
	, DT_MOVIMENTACAO DATE
	, VALOR NUMERIC(8,2)
	, TIPO ENUM('DEBITO', 'CRÉDITO')
	, OBSERVAÇÃO TEXT
	, FOREIGN KEY (IDCONTA) REFERENCES CONTA (IDCONTA)
);

CREATE VIEW VW_SALDO AS
SELECT
	CONTA.IDCONTA
    , CONTA.LIMITE_CREDITO
    , IFNULL(
		SUM(CASE
			WHEN MOVIMENTACAO.TIPO = 'DEBITO' 
			THEN MOVIMENTACAO.VALOR * -1 
            ELSE MOVIMENTACAO.VALOR END)
		, 0) AS SALDO
	,  CONTA.LIMITE_CREDITO + IFNULL(SUM(CASE
			WHEN MOVIMENTACAO.TIPO = 'DEBITO' 
			THEN MOVIMENTACAO.VALOR * -1 
            ELSE MOVIMENTACAO.VALOR END)
		, 0) AS SALDO_TOTAL
FROM
	CONTA
    LEFT JOIN MOVIMENTACAO ON
    CONTA.IDCONTA = MOVIMENTACAO.IDCONTA
GROUP BY
	CONTA.IDCONTA
    , CONTA.LIMITE_CREDITO;
    
DELIMITER $$
CREATE PROCEDURE SP_MOVIMENTACAO (	pIDCONTA INT
									, pTIPO ENUM('SAQUE', 'DEPOSITO')
                                    , pVALOR NUMERIC(8,2)
                                    , OUT pRESULTADO INT
								)
BEGIN
	/*
		pRESULTADO:
			0 - NÃO EXISTE CONTA
			1 - DEPOSITO EFETUADO COM SUCESSO
			2 - SAQUE EFETUADO COM SUCESSO
			3 - SEM SALDO PARA SAQUE
			4 - VALOR INFORMADO INVALIDO
    */
 
	DECLARE vSALDO NUMERIC(8,2);
	-- VERIFICANDO O VALOR INFORMADO
    IF IFNULL(pVALOR, 0) > 0 THEN
		-- VERIFICAR SE A CONTA EXISTE
		IF EXISTS (SELECT IDCONTA FROM CONTA WHERE IDCONTA = pIDCONTA) THEN
			-- VERIFICAR O TIPO OPERACAO
			IF pTIPO = 'DEPOSITO' THEN
				INSERT INTO MOVIMENTACAO(IDCONTA, TIPO, VALOR)
				VALUES(pIDCONTA, 'CRÉDITO', pVALOR);
				-- DEPOSITO EFETUADO COM SUCESSO
				SET pRESULTADO = 1;
			ELSEIF pTIPO = 'SAQUE' THEN
				-- LOCALIZANDO O SALDO DO CLIENTE
				SELECT SALDO_TOTAL
				INTO vSALDO
				FROM VW_SALDO
				WHERE IDCONTA = pIDCONTA;
				IF pVALOR <= vSALDO THEN
					INSERT INTO MOVIMENTACAO(IDCONTA, TIPO, VALOR)
					VALUES(pIDCONTA, 'DEBITO', pVALOR);
					-- SAQUE EFETUADO COM SUCESSO
					SET pRESULTADO = 2;	
				ELSE
					-- SEM SALDO PARA SAQUE
					SET pRESULTADO = 3;
				END IF;				
			END IF;	
		ELSE
			-- NÃO EXISTE CONTA
			SET pRESULTADO = 0;
		END IF;
	ELSE
		-- VALOR INFORMADO INVALIDO
		SET pRESULTADO = 4;
	END IF;
END $$

 CREATE PROCEDURE SP_TRANSFERENCIA(	pCONTA_ORIGEM INT
									, pCONTA_DESTINO INT
									, pVALOR NUMERIC(8,2)
                                    , OUT pRESULTADO INT
								)
BEGIN
	/*
		pRESULTADO:
			0 - CONTA DE ORIGEM OU DESTINO INVALIDA
			1 - TRANFERENCIA COM SUCESSO
			2 - NÃO POSSIVEL FAZER O SAQUE NA CONTA DE ORIGEM
    */
 
	DECLARE vRESULTADO INT;
	-- VERIFICANDO SE A CONTA DE ORIGEM E DESTINO EXISTEM
	IF (EXISTS (SELECT IDCONTA FROM CONTA WHERE IDCONTA = pCONTA_ORIGEM)
		AND EXISTS (SELECT IDCONTA FROM CONTA WHERE IDCONTA = pCONTA_DESTINO)
		) THEN
 
		-- SAQUE
		CALL SP_MOVIMENTACAO(pCONTA_ORIGEM, 'SAQUE', pVALOR, vRESULTADO);
 
		IF vRESULTADO = 2 THEN
			-- DEPOSITO
			CALL SP_MOVIMENTACAO(pCONTA_DESTINO, 'DEPOSITO', pVALOR, vRESULTADO);
			SET pRESULTADO = 1;            
		ELSE
			-- NÃO POSSIVEL FAZER O SAQUE NA CONTA DE ORIGEM
			SET pRESULTADO = 2;
        END IF;
    ELSE
		-- CONTA DE ORIGEM OU DESTINO INVALIDA
		SET pRESULTADO = 0;
    END IF;
 
END $$
DELIMITER ;


INSERT INTO CLIENTE(NOME) VALUES ('JOAO DA SILVA');
INSERT INTO CONTA(IDCLIENTE, TIPO, LIMITE_CREDITO)VALUES(1, 'CONTA-CORRENTE', 10000);
INSERT INTO CLIENTE(NOME) VALUES ('MARIA DA SILVA');
INSERT INTO CONTA(IDCLIENTE, TIPO, LIMITE_CREDITO)VALUES(2, 'CONTA-CORRENTE', 10000);
INSERT INTO CONTA(IDCLIENTE, TIPO, LIMITE_CREDITO)VALUES(2, 'POUPANCA', 0);

CALL SP_TRANSFERENCIA (1, 2, 1000, @RESULTADO);
select @RESULTADO;

CALL SP_MOVIMENTACAO(1, 'DEPOSITO', 100, @RESULTADO);
CALL SP_MOVIMENTACAO(2, 'SAQUE', -100, @RESULTADO);
SELECT  @RESULTADO;
SELECT * FROM VW_SALDO WHERE IDCONTA =1;